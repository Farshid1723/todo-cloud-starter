dist: alpine
sudo: required
services:
  - docker

# Get Google Chrome headless browser for Angular tests
# Install latest Docker CE so we can use Dockerfile outside build context
addons:
  apt:
    sources:
      - google-chrome
    packages:
      - google-chrome-stable
      - docker-ce

# Install any dependencies, update Docker Compose to 1.23.2 so we can use Dockerfile outside build context
before_install:
 - docker --version
 - docker-compose --version
 - sudo rm /usr/local/bin/docker-compose
 - curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` > docker-compose
 - chmod +x docker-compose
 - sudo mv docker-compose /usr/local/bin
 - docker-compose --version
 - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
 - ls -la /etc/apt/sources.list.d/
 - sudo touch /etc/apt/sources.list.d/google.list
 - sudo chmod 777 /etc/apt/sources.list.d/google.list
 - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
 - ls -la /etc/apt/sources.list.d/
 - sudo apt-get update
 - sudo apt-get install -y google-chrome-stable xvfb
 - export CHROME_BIN=~/.local/share/flatpak/app/com.google.Chrome/current/active/export/bin/com.google.Chrome
 - ls -la /usr/bin/google-chrome
 - ls -la /usr/bin/google*
 - echo $CHROME_BIN

#install:

# Build development images for test
before_script:
  - docker build ./todo-view -f ./todo-view/Dockerfile.dev -t nfarshid/todo-view-test
  - docker build ./todo-cache-service -f Dockerfile.nodejs.dev -t nfarshid/todo-cache-service-test

# Run some tests
script:
  - docker run nfarshid/todo-view-test npm test -- --watch=false --no-progress --browsers=ChromeHeadlessNoSandbox
  - docker run nfarshid/todo-cache-service-test npm test

after_success:
  # Build Production Images for deployment
  - docker-compose -f docker-compose.yml -f docker-compose.prod.yml build

  # Login to Docker Hub
  - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin

  # Take the built production images and push to Docker Hub
  - docker-compose -f docker-compose.yml -f docker-compose.prod.yml push
